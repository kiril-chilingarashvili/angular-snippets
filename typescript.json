{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    
    "prop": {
        "prefix": "prop",
        "body": [
            "private _${1:prop}: ${2:prop};",
            "public get $${1:prop}(): ${2:prop} {",
            "\treturn this._${1:prop};",
            "}",
            "@Input() public set ${1:prop}(value: ${2:prop}) {",
            "\tif (this._${1:prop} != value) {",
            "\t\tthis._${1:prop} = value;",
            "\t}",
            "}"
        ],
        "description": "prop"
    },
    
    "propo": {
        "prefix": "propo",
        "body": [
            "private _${1:propertyName}ChangedSource = new Subject<${2:string}>();",
            "@Output() public get ${1:propertyName}Changed(): Observable<${2:string}> {",
            "\treturn this._${1:propertyName}ChangedSource.asObservable();",
            "}",
            "private _${1:propertyName} = ${3:''};",
            "private _${1:propertyName}Change(value: ${2:string}) {",
            "\tif (this._${1:propertyName} != value) {",
            "\t\tthis._${1:propertyName} = value;",
            "\t\tthis._${1:propertyName}ChangedSource.next(value);",
            "\t}",
            "}",
            "public get ${1:propertyName}(): ${2:string} {",
            "\treturn this._${1:propertyName};",
            "}",
            "@Input() public set ${1:propertyName}(value: ${2:string}) {",
            "\tthis._${1:propertyName}Change(value);",
            "}"
        ],
        "description": "prop"
    }
}
